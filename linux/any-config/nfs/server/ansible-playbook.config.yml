#!/usr/bin/env -S ansible-playbook -K -i ${PWD}/ansible-inventories
# code: language=ansible
---

- name: config
  hosts: linux
  become: true
  tasks:

    - rescue:
      - name: rescue|fail tasks
        when:
          - hostvars[inventory_hostname].nfs.server | default(None,true) != None
        ansible.builtin.fail:
          msg: "config fail. exclude host var assert."

      block:
      - name: assert host var
        ansible.builtin.assert:
          that:
            - hostvars[inventory_hostname].nfs.server | default(None,true) != None
          msg: "host var assert fail 'nfs.server'"
          quiet: true

      - vars:
          nfs_server_exports: "{{ nfs.server.exports }}"
          nfs_server_rpcmountdopts: "{{ nfs.server.rpcmountdopts }}"
        block:
        - name: include vars
          when: nfs.server.vars_file is defined
          ansible.builtin.include_vars:
            file: "{{ nfs.server.vars_file }}"

        - name: configure nfs-server
          ansible.builtin.include_role:
            name: mrlesmithjr.nfs-server
            apply:
              become: true

      - block:
        - name: list nfs-server file
          ansible.builtin.find:
            paths: /etc/default/
            file_type: file
            patterns: 'nfs*'
          register: nfs_server_file_list

        - name: shell nfs-server status
          vars:
            list: "{{ nfs_server_file_list.files | default([],true) | map(attribute='path') }}"
            append:
              - showmount --exports
          loop: "{{ ['cat'] | product(list) | map('join',' ') | list + append }}"
          ansible.builtin.shell:
            cmd: "{{ item }}"
          register: nfs_server_status_shell

        - name: print status output
          vars:
            linux_hostvars: "{{ hostvars | dict2items
              | selectattr('key','in',ansible_play_hosts)
              | selectattr('value.nfs_server_status_shell','defined') }}"
          ansible.builtin.pause:
            seconds: 1
            prompt: |
              {% for host in linux_hostvars %}

              [{{ host.key }}] =>
              {%   for item in host.value.nfs_server_status_shell.results %}
              --------------------------------------------------
              $ {{ item.item }}
              {{ item.stdout | default('',true) }}
              {{ item.stderr | default('',true) }}
              {%   endfor %}
              {% endfor %}
